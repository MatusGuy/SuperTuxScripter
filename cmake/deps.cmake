if (UNIX AND NOT APPLE)
    set(LINUX TRUE)
endif()

if (LINUX)
    find_package(PkgConfig)
endif()

macro(add_target_dependency tar)
    set(deps ${ARGN})
    foreach(dep ${deps})
        if(LINUX)
            find_package(${dep} QUIET)
            if(NOT ${${dep}_FOUND})
                pkg_search_module(${dep} REQUIRED ${dep})
            endif()
            target_link_libraries(${tar} ${dep})
            target_include_directories(${tar} PUBLIC ${${dep}_INCLUDE_DIRS})
        elseif(ANDROID)
            find_library(${dep} ${dep})
            target_link_libraries(${tar} ${dep})
            target_include_directories(${tar} PUBLIC ${${dep}_INCLUDE_DIRS})
            add_dependencies(${tar} ${deps})
        else()
            find_package(${dep} REQUIRED)

            find_library(DEP_LIB ${dep})
            if(DEP_LIB STREQUAL DEP_LIB-NOTFOUND)
                    set(DEP_LIB "${dep}::${dep}")
            endif()
            target_link_libraries(${tar} ${DEP_LIB})

            get_target_property(DEP_INCLUDES ${DEP_LIB} INTERFACE_INCLUDE_DIRECTORIES)
            target_include_directories(${tar} PUBLIC ${DEP_INCLUDES})

            unset(DEP_LIB)
        endif()
    endforeach()
endmacro()

macro(add_external_target_dependency tar)
    cmake_parse_arguments(DEPS_ARGS "STATIC" "" "" ${ARGN})
    set(deps ${DEPS_ARGS_UNPARSED_ARGUMENTS})
    foreach(dep ${deps})
        set(deptar "${dep}")
        if(DEPS_ARGS_STATIC)
            set(deptar ${deptar}-static)
        endif()
        if(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
            add_subdirectory(${CMAKE_SOURCE_DIR}/external/${dep})
        endif()
        if(NOT TARGET ${deptar})
            set(deptar ${dep})
        endif()
        get_target_property(DEP_INCLUDES ${deptar} INCLUDE_DIRECTORIES)
        target_include_directories(${tar} PUBLIC ${DEP_INCLUDES})
        target_link_libraries(${tar} PUBLIC ${deptar})
        add_dependencies(${tar} ${deptar})
    endforeach()
endmacro()
